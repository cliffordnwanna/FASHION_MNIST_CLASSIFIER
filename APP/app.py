# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fkLopa9s-3gz91jrY1n27rnbvdPc5sy1
"""

import os
import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
from tensorflow.keras.models import load_model

# Define the path for the model
MODEL_PATH = 'models/fashion_mnist_model.h5'

# Function to check and load the model
def load_or_train_model():
    if not os.path.exists(MODEL_PATH):
        st.warning("Model file not found. Training the model...")
        train_and_save_model()
    return load_model(MODEL_PATH)

# Function to train and save the model (if the model is not available)
def train_and_save_model():
    from tensorflow.keras.datasets import fashion_mnist
    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense, Flatten
    from tensorflow.keras.utils import to_categorical

    # Load the dataset
    (X_train, y_train), _ = fashion_mnist.load_data()
    X_train = X_train / 255.0
    X_train = X_train.reshape(-1, 28 * 28)

    # Convert labels to categorical
    y_train = to_categorical(y_train, 10)

    # Define the model architecture
    model = Sequential([
        Flatten(input_shape=(28 * 28,)),
        Dense(256, activation='relu'),
        Dense(10, activation='softmax')
    ])

    # Compile the model
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    # Train the model
    model.fit(X_train, y_train, epochs=10, batch_size=128)

    # Save the model
    model.save(MODEL_PATH)
    st.success("Model trained and saved!")

# Load the trained model (or train if not found)
model = load_or_train_model()

# Your Streamlit app code here...
def preprocess_image(image):
    image = image.convert('L').resize((28, 28))
    image = np.array(image) / 255.0
    return image.reshape(1, 28 * 28)

def main():
    st.title("Fashion MNIST Classifier")
    st.write("Upload an image of a fashion item, and the model will predict its category!")

    # File uploader
    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image.', use_column_width=True)
        st.write("Classifying...")
        processed_image = preprocess_image(image)
        predictions = model.predict(processed_image)
        predicted_class = np.argmax(predictions)
        class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
        st.write(f"Prediction: {class_names[predicted_class]}")

if __name__ == '__main__':
    main()

